version: "3.9"

################################################################################
# Copy .env.example → .env and customize before first run
################################################################################

services:
#───────────────────────────────────────────────────────────────────────────────
#  Front-end  (Next.js)
#───────────────────────────────────────────────────────────────────────────────
  frontend:
    image: neaitaskbot/taskbot-portal:1.0
    container_name: taskbot-frontend
    environment:
      NODE_ENV: production
      # Add any other frontend specific env vars, e.g., API endpoint if needed at build time
      # NEXT_PUBLIC_API_URL: https://${PUBLIC_DOMAIN:-localhost}/gateway
    restart: unless-stopped

#───────────────────────────────────────────────────────────────────────────────
#  Python installer / licence API  (Flask)
#───────────────────────────────────────────────────────────────────────────────
  installer:
    image: neaitaskbot/taskbot-installer:1.0
    container_name: taskbot-installer
    environment:
      TASKBOT_DEPLOY_MODE: ${TASKBOT_DEPLOY_MODE:-ONPREMISE}
      FLASK_RUN_PORT: ${FLASK_RUN_PORT:-5000}
      # Pass SSH details to the installer app if it reads them from env
      # Otherwise, it should read from the mounted key file directly
      # SSH_USER: ${INSTALLER_SSH_USER}
      # SSH_PRIVATE_KEY_PATH: ${INSTALLER_SSH_PRIVATE_KEY_PATH}
    volumes:
      - installer-data:/data # Internal persistent data for the installer itself
      - ./keys:/etc/taskbot/keys:ro # Mount SSH keys for deploying agents
      - ./certs:/etc/taskbot/certs:ro # Mount generated certs to be sent to agents
    restart: unless-stopped

#───────────────────────────────────────────────────────────────────────────────
#  Java Taskbot Gateway (Spring Boot)
#───────────────────────────────────────────────────────────────────────────────
  gateway:
    image: neaitaskbot/taskbot-gw:1.0 # The gateway image
    container_name: taskbot-gateway
    environment:
      # Example: Configure gateway to know about the API service
      TASKBOT_API_SERVICE_URL: http://taskbot-api-service:${TASKBOT_API_INTERNAL_PORT:-18902}
      # Add other gateway specific environment variables
      # SERVER_PORT: ${GATEWAY_INTERNAL_PORT:-8080} # If image doesn't default to 8080
      # LOG_LEVEL: ${LOG_LEVEL_GATEWAY:-INFO}
    depends_on:
      - taskbot-api-service
    restart: unless-stopped

#───────────────────────────────────────────────────────────────────────────────
#  Java Taskbot API Service (Spring Boot)
#───────────────────────────────────────────────────────────────────────────────
  taskbot-api-service: # Renamed from java-backend
    image: neaitaskbot/taskbot-api:1.0
    container_name: taskbot-api-service
    environment:
      # ── Core application settings ──────────────────────────────────────────
      ACTIVE_PROFILE: prod
      RUNNING_ON_CLUSTER: "false"
      LOG_LEVEL: ${LOG_LEVEL_API:-INFO}
      TASKBOT_LICENSE_TOKEN: ${TASKBOT_LICENSE_TOKEN}
      # SERVER_PORT: ${TASKBOT_API_INTERNAL_PORT:-18902} # If image doesn't default to 18902

      # ── MariaDB -----------------------------------------------------------
      JDBC_URL: jdbc:mariadb://mariadb:3306/${MARIADB_DATABASE_NAME:-nucleus}?zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&useSSL=false
      JDBC_USR: ${MARIADB_USER:-nucleus_user}
      JDBC_PWD: ${MARIADB_PASSWORD:-secretpassword}

      # ── MongoDB -----------------------------------------------------------
      SPRING_DATA_MONGODB_URI: mongodb://${MONGODB_ROOT_USERNAME:-mongoadmin}:${MONGODB_ROOT_PASSWORD:-secretmongopassword}@mongodb:27017/${MARIADB_DATABASE_NAME:-nucleus}?authSource=admin

      # ── RabbitMQ ----------------------------------------------------------
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER:-rabbituser}
      RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS:-rabbitpassword}
      TASK_RUN_REQ_EXCH: kk_task_run_req_exch
      TASK_RUN_REQ_QUEUE: kk_task_run_request
      TASK_RUN_REQ_ROUTE_KEY: run_task

      # ── Redis -------------------------------------------------------------
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PWD: ${REDIS_PASSWORD:-secretredispassword}

      # ── External endpoints (used by API to call itself / UI) --------------
      # If API needs to call itself via its own exposed endpoint (e.g. through gateway)
      CORE_API_ENDPOINT: http://localhost:${TASKBOT_API_INTERNAL_PORT:-18902} # For internal self-calls if any, or calls to its own non-proxied port
      # Public URL of the frontend, for generating links etc.
      FRONT_ENDPOINT: https://${PUBLIC_DOMAIN:-localhost}
    depends_on:
      - mariadb
      - redis
      - rabbitmq
      - mongodb
    restart: unless-stopped

#───────────────────────────────────────────────────────────────────────────────
#  Databases & queues
#───────────────────────────────────────────────────────────────────────────────
  mariadb:
    image: neaitaskbot/taskbot-mariadb:0.1
    container_name: taskbot-mariadb
    environment:
      MYSQL_ROOT_PASSWORD: "${MARIADB_ROOT_PASSWORD}"
      MYSQL_DATABASE: "${MARIADB_DATABASE_NAME:-nucleus}" # This DB will be created
      MYSQL_USER: "${MARIADB_USER:-nucleus_user}"         # This user will be created
      MYSQL_PASSWORD: "${MARIADB_PASSWORD:-secretpassword}" # And granted privileges on MYSQL_DATABASE
    volumes:
      # The init.sql is now baked into the image, so no mount needed for it.
      - ${DATA_PATH_BASE:-./taskbot-data}/mariadb:/var/lib/mysql
    ports: ["13306:3306"] # Expose for external access if needed, otherwise remove
    restart: unless-stopped

  redis:
    image: redis:7.2 # Consider 7.2.5
    container_name: taskbot-redis
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - ${DATA_PATH_BASE:-./taskbot-data}/redis:/data
    ports: ["16379:6379"] # Expose for external access if needed, otherwise remove. Changed host port to avoid conflict if local Redis runs.
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management # Consider 3.13-management
    container_name: taskbot-rabbitmq
    hostname: taskbot-rabbit # Can be useful for clustering if ever needed
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
    volumes:
      - ${DATA_PATH_BASE:-./taskbot-data}/rabbitmq:/var/lib/rabbitmq
    ports:
      - "15672:15672" # Management UI
      - "15673:5672"  # AMQP port. Changed host port to avoid conflict.
    restart: unless-stopped

  mongodb:
    image: mongo:4.4 # Consider a newer LTS like 5.0 or 6.0 if compatible
    container_name: taskbot-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGODB_ROOT_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGODB_ROOT_PASSWORD}"
    volumes:
      - ${DATA_PATH_BASE:-./taskbot-data}/mongodb:/data/db
    ports: ["127017:27017"] # Expose for external access if needed, otherwise remove. Changed host port.
    restart: unless-stopped

#───────────────────────────────────────────────────────────────────────────────
#  Nginx reverse-proxy (ports 80 & 443 exposed on host)
#───────────────────────────────────────────────────────────────────────────────
  nginx:
    image: nginx:1.27-alpine # Use a specific version like 1.27.0-alpine
    container_name: taskbot-nginx
    volumes:
      - ./nginx/app.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs:/etc/nginx/certs:ro # Mount generated certs
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - installer
      - gateway
    restart: unless-stopped

volumes:
  installer-data: # Persistent volume for the installer service itself